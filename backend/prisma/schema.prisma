generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int          @id @default(autoincrement())
  walletAddress  String       @unique
  username       String       @unique
  profilePicture String?
  streakCount    Int          @default(0)
  tokenBalance   Int          @default(0)
  role           Role         @default(USER)
  messages       Messages[]
  chatRooms      ChatRooms[]  @relation("UserChatRooms")
  ngoHistories   NGOHistory[]
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
}

enum Role {
  USER
  VALIDATOR
}

enum RoomType {
  GLOBAL
  PRIVATE
  AI
}

model ChatRooms {
  roomId       Int        @id @default(autoincrement())
  roomName     String     @unique
  type         RoomType
  participants User[]     @relation("UserChatRooms")
  messages     Messages[]
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
}

model Messages {
  messageId               Int        @id @default(autoincrement())
  content                 String     
  isEncrypted             Boolean    @default(false)
  encryptedData           String?    
  sender                  User       @relation(fields: [senderId], references: [id])
  senderId                Int
  room                    ChatRooms  @relation(fields: [roomId], references: [roomId])
  roomId                  Int
  likes                   Int        @default(0)
  dislikes                Int        @default(0)
  replyToId               Int?
  replyTo                 Messages?  @relation("MessageReplies", fields: [replyToId], references: [messageId])
  replies                 Messages[] @relation("MessageReplies")
  isValidated             Boolean    @default(false)
  rewarded                Boolean    @default(false)
  createdAt               DateTime   @default(now())
  updatedAt               DateTime   @updatedAt
}

model NGOHistory {
  id            Int      @id @default(autoincrement())
  user          User     @relation(fields: [userId], references: [id])
  userId        Int
  amountDonated Int
  donatedAt     DateTime @default(now())
}
